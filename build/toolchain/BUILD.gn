# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

toolchain("emcc") {
    if (host_os == "win") {
        emcc = "emcc.bat"
        emcxx = "em++.bat"
        emar = "emar.bat"
    } else {
        emcc = "emcc"
        emcxx = "em++"
        emar = "emar"
    }

    tool("cc") {
        depfile = "{{output}}.d"
        command = "$emcc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        description = "CC {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.bc",
        ]
    }

    tool("cxx") {
        depfile = "{{output}}.d"
        command = "$emcxx-MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        description = "CXX {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.bc",
        ]
    }

    tool("alink") {
        rspfile = "{{output}}.rsp"
        command = "$emar rcs {{output}} @$rspfile"
        description = "AR {{target_output_name}}{{output_extension}}"
        rspfile_content = "{{inputs}}"
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
        ]
        default_output_extension = ".a"
        output_prefix = "lib"
    }

    tool("solink") {
        soname = "{{target_output_name}}{{output_extension}}"
        sofile = "{{output_dir}}/$soname"
        rspfile = soname + ".rsp"
        command = "$emcxx -shared {{ldflags}} -o $sofile -Wl,-soname=$soname @$rspfile"
        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"
        description = "SOLINK $soname"
        default_output_extension = ".so"
        default_output_dir = "{{root_out_dir}}"
        outputs = [
            sofile,
        ]
        link_output = sofile
        depend_output = sofile
        output_prefix = "lib"
    }

    tool("link") {
        outfile = "{{target_output_name}}{{output_extension}}"
        rspfile = "$outfile.rsp"
        command = "$emcxx {{ldflags}} -o $outfile -Wl,--start-group @$rspfile {{solibs}} -Wl,--end-group {{libs}}"
        description = "LINK $outfile"
        default_output_dir = "{{root_out_dir}}"
        rspfile_content = "{{inputs}}"
        default_output_extension = ".js"
        outputs = [
            outfile,
        ]
    }

    tool("stamp") {
        command = "touch {{output}}"
        description = "STAMP {{output}}"
    }

    tool("copy") {
        command = "cp -af {{source}} {{output}}"
        description = "COPY {{source}} {{output}}"
    }
}

toolchain("msvc") {
    tool("cc") {
        rspfile = "{{output}}.rsp"
        pdbname = "{{target_out_dir}}/{{target_output_name}}_c.pdb"
        command = "cl /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
        depsformat = "msvc"
        description = "CC {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
        rspfile_content = "{{defines}} {{include_dirs}} {{cflags}} {{cflags_c}}"
    }

    tool("cxx") {
        rspfile = "{{output}}.rsp"
        pdbname = "{{target_out_dir}}/{{target_output_name}}_cc.pdb"
        command = "cl /nologo /showIncludes /FC @$rspfile /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
        depsformat = "msvc"
        description = "CXX {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
        rspfile_content = "{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"
    }

    tool("alink") {
        rspfile = "{{output}}.rsp"
        command = "lib /ltcg /nologo /out:{{output}} @$rspfile"
        description = "LIB {{target_output_name}}{{output_extension}}"
        rspfile_content = "{{inputs}}"
        outputs = [
            "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
        ]
        default_output_extension = ".lib"
    }

    tool("solink") {
        dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        libname = "${dllname}.lib" # foo.dll.lib
        rspfile = dllname + ".rsp"
        command = "link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:${dllname}.pdb @$rspfile"
        rspfile_content = "{{libs}} {{solibs}} {{inputs}} {{ldflags}}"
        description = "LINK(DLL) $dllname"
        default_output_extension = ".dll"
        outputs = [
            dllname,
            libname,
        ]
        link_output = libname
        depend_output = libname
        runtime_link_output = dllname
        # Since the above commands only updates the .lib file when it changes, ask
        # Ninja to check if the timestamp actually changed to know if downstream
        # dependencies should be recompiled.
        restat = true
    }

    tool("link") {
        rspfile = "{{output}}.rsp"
        rspfile_content = "{{inputs}} {{libs}} {{solibs}} {{ldflags}}"
        command = "link /nologo /OUT:{{output}} /PDB:{{output}}.pdb @$rspfile"
        description = "LINK {{output}}"
        default_output_dir = "{{root_out_dir}}"
        default_output_extension = ".exe"
        outputs = [
            "{{output_dir}}/{{target_output_name}}{{output_extension}}",
        ]
    }

    tool("stamp") {
        command = "touch {{output}}"
        description = "STAMP {{output}}"
    }

    tool("copy") {
        command = "cp -af {{source}} {{output}}"
        description = "COPY {{source}} {{output}}"
    }
}